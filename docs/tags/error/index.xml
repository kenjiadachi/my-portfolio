<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>error on CPX</title>
    <link>https://cpx.business/tags/error/</link>
    <description>Recent content in error on CPX</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 24 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://cpx.business/tags/error/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Rails]404/500などのエラーページって結局どうすればいいの？</title>
      <link>https://cpx.business/blog/how-to-create-an-error-page/</link>
      <pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cpx.business/blog/how-to-create-an-error-page/</guid>
      <description>Railsでアプリケーションを開発している時にふと、「そういえば404エラーのページってどうやって作るんだろう」と思い調べてみました。
 ※こちらの記事は、Qiitaにて公開していたものを2020/03/01にこちらに移行しています。
元記事はこちら
※現在はこちらのページのURLのみ記載されています。
 基本Railsが勝手にいい感じにしてくれます。 まず大前提として、作る必要はありません。
というのも、Railsが自動で作ってくれています。
じゃあルーティングはどうするの？ということですが、それも勝手になんとかしてくれています。
なので特にエラー画面をおしゃれにしたい！とかじゃない場合はなにもしなくても大丈夫です。
Railsさんすごい。
 参考: 他の記事と言ってることが違う！と思ったあなたへ 「rails 404」とかでググると、こんな記事がたくさん出てきます。
 Railsの404/500エラーページ、簡単作成手順 Railsで404/500エラーの処理 Railsで404エラーメッセージを出すために  これらの記事では、application_controller.rbを触ったり、404ページを1から作ったりしていますが、よくない方法のようです。
僕には理解できませんでしたが、Railsの404,500エラーページをカスタマイズのコメントで詳しく説明してくださっています。
※ここに書いてあることがわかる人はこちらの方法で動的なページを作られるといいと思います。とりあえず公開したい！という僕のような人は後に書いてある方法でおとなしく静的なページを作るべきだと思います。(動的、静的については後で少し触れます。)
僕も始めこれらの方法でやっていたのですが、http://localhost:3000/hoge.txt のように、拡張子がhtmlじゃない場合に意図した画面遷移にならなかったので修正しました。
 まずはエラー画面を確認しよう 先ほどRailsが自動で作ってくれていると言いましたが、勝手に作ってくれたページはpublicの中にあります。
 public/404.html public/422.html public/500.html  の3つが、エラーページになります。(これらの違いは後で説明します。)
まずはこれらのページが実際にエラーの際に表示されるようにしましょう。
なにも触らないままdevelopment環境で適当なアドレス打ってみても、こんな画面が出ますよね。
なのでエラー画面を確認したい！という時は、config/environments/development.rb の中身を少しいじる必要があります。 こんな感じでtrueでコメントアウトしてある部分を、コメントアウトを外しfalseにしてみてください。
config.consider_all_requests_local = false 参考: Railsで404/500エラーの処理
僕の場合は13行目ぐらいにありました。
その後サーバーを再起動して、適当なアドレスを打ち込むとこんな画面が出てくるようになると思います。
この画面がRailsが自動で作ってくれた404エラーページ(=public/404.html)になります。
これを修正すれば、自分だけのエラーページの完成です！
 エラーページを修正しよう エラーページを修正するために、まずは400、422、500の違いを知りましょう。
LIGさんの記事によれば、
  404 Not Found: リソースが見つからなかった場合。 422 Unprocessable Entity: WebDAVの拡張ステータスコード。 500 Internal Server Error: サーバ内部でエラーが発生した場合に返される。   ということだそうです。</description>
    </item>
    
  </channel>
</rss>