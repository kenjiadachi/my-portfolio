<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails on CPX</title>
    <link>https://cpx.business/tags/rails/</link>
    <description>Recent content in Rails on CPX</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 24 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://cpx.business/tags/rails/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Rails]404/500などのエラーページって結局どうすればいいの？</title>
      <link>https://cpx.business/blog/how-to-create-an-error-page/</link>
      <pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cpx.business/blog/how-to-create-an-error-page/</guid>
      <description>Railsでアプリケーションを開発している時にふと、「そういえば404エラーのページってどうやって作るんだろう」と思い調べてみました。
 ※こちらの記事は、Qiitaにて公開していたものを2020/03/01にこちらに移行しています。
元記事はこちら
※現在はこちらのページのURLのみ記載されています。
 基本Railsが勝手にいい感じにしてくれます。 まず大前提として、作る必要はありません。
というのも、Railsが自動で作ってくれています。
じゃあルーティングはどうするの？ということですが、それも勝手になんとかしてくれています。
なので特にエラー画面をおしゃれにしたい！とかじゃない場合はなにもしなくても大丈夫です。
Railsさんすごい。
 参考: 他の記事と言ってることが違う！と思ったあなたへ 「rails 404」とかでググると、こんな記事がたくさん出てきます。
 Railsの404/500エラーページ、簡単作成手順 Railsで404/500エラーの処理 Railsで404エラーメッセージを出すために  これらの記事では、application_controller.rbを触ったり、404ページを1から作ったりしていますが、よくない方法のようです。
僕には理解できませんでしたが、Railsの404,500エラーページをカスタマイズのコメントで詳しく説明してくださっています。
※ここに書いてあることがわかる人はこちらの方法で動的なページを作られるといいと思います。とりあえず公開したい！という僕のような人は後に書いてある方法でおとなしく静的なページを作るべきだと思います。(動的、静的については後で少し触れます。)
僕も始めこれらの方法でやっていたのですが、http://localhost:3000/hoge.txt のように、拡張子がhtmlじゃない場合に意図した画面遷移にならなかったので修正しました。
 まずはエラー画面を確認しよう 先ほどRailsが自動で作ってくれていると言いましたが、勝手に作ってくれたページはpublicの中にあります。
 public/404.html public/422.html public/500.html  の3つが、エラーページになります。(これらの違いは後で説明します。)
まずはこれらのページが実際にエラーの際に表示されるようにしましょう。
なにも触らないままdevelopment環境で適当なアドレス打ってみても、こんな画面が出ますよね。
なのでエラー画面を確認したい！という時は、config/environments/development.rb の中身を少しいじる必要があります。 こんな感じでtrueでコメントアウトしてある部分を、コメントアウトを外しfalseにしてみてください。
config.consider_all_requests_local = false 参考: Railsで404/500エラーの処理
僕の場合は13行目ぐらいにありました。
その後サーバーを再起動して、適当なアドレスを打ち込むとこんな画面が出てくるようになると思います。
この画面がRailsが自動で作ってくれた404エラーページ(=public/404.html)になります。
これを修正すれば、自分だけのエラーページの完成です！
 エラーページを修正しよう エラーページを修正するために、まずは400、422、500の違いを知りましょう。
LIGさんの記事によれば、
  404 Not Found: リソースが見つからなかった場合。 422 Unprocessable Entity: WebDAVの拡張ステータスコード。 500 Internal Server Error: サーバ内部でエラーが発生した場合に返される。   ということだそうです。</description>
    </item>
    
    <item>
      <title>[Rails]1つのformを複数画面に分割して表示するwizard formを実装する</title>
      <link>https://cpx.business/blog/how-to-create-wizard-form-in-rails/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cpx.business/blog/how-to-create-wizard-form-in-rails/</guid>
      <description>どんなwebサービスでさえ、Formでの離脱率は可能な限り下げたいですよね。
ただ、サービスの性質上どうしてもFormの項目が多くなってしまうこともあります。
そんなサービスでも、Formの離脱率を下げるため、今回Formをスッキリと見せて入力してもらいやすくするため、Wizard Formの形式に変更してみました。
 ※こちらの記事は、Qiitaにて公開していたものを2020/03/01にこちらに移行しています。
元記事はこちら
※現在はこちらのページのURLのみ記載されています。
 ※Wizard Formについては、それ自体に賛否両論あること、もちろんサービスの性質やターゲットによって使うべきかどうかの判断が必要なことについては今回の記事では書きません。 また別の記事にでも書こうかな…
 実装方法の選択 Railsでは、wickedというgemがWizard Form用に存在します。
ただ、毎回updateを回して情報を更新するための仕組みなので、今回の要件では、こんな問題が出てくるよう感じました。
 Form入力を途中でやめた場合も情報が保存されてしまう ある程度厳密なDB作成を初期の方に行ったので、初期値を色々触る必要があって今更めんどくさい  名前、メールアドレスは必須　とかとか    というわけで、下記2つの方法が残されていましたが、結論として「ActiveModelゴリゴリしてみる」で実装することにしました。
Form関連はある程度厳密さが求められるので、jQueryでブラウザ依存にすることに若干の不安があったのが、その理由です。
 ActiveModelゴリゴリしてみる jQueryでURLは変えずに画面の見た目だけ変わるようなFormを作る  フォームをぐっと使いやすくする！ウィザード型jQueryプラグイン6選【2017年版】に色々載ってます     さて、実装。 基本的には、こちらの記事を参考にしました。 Developing a wizard or multi-steps forms in Rails – Nicolas Blanco – Medium
読んでみると、ActiveModelとsessionとでなんやかんやしてなんやかんやしそうですね。
デモはこちら(ダウンロードしてlocalで実行するのが良さそうです。なぜかHerokuは動かなかった…) GitHub - nicolasblanco/wizard_app
基本的には、この通りにやったらできました。
ただ、LiveDeliの場合、ネストした値のValidationとかの関係から、すでにActiveModelを作成していたので、そこで少し戦いました。
参考： Rails で複数モデルに関連したパラメータを検証する方法 - ボクココ
Railsのversionが5.01なので、ActiveModelではAttributesが使えない…
参考： ActiveModel::Attributes が最高すぎるんだよな。 - Qiita</description>
    </item>
    
    <item>
      <title>[Rails]動的なvalidationをParsleyと、Bootstrap4を使っておしゃれに実装する</title>
      <link>https://cpx.business/blog/how-to-use-parsely-in-rails/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cpx.business/blog/how-to-use-parsely-in-rails/</guid>
      <description>Form離脱の原因として、validation関連は間違いなくあげられると思います。
送信してから、「ここおかしいから直して！」とか言われても「は？(威圧)」ってなりますよね。私もそうです。
なので、フォーム入力時にvalidationを行うように変更しました。
 ※こちらの記事は、Qiitaにて公開していたものを2020/03/01にこちらに移行しています。
元記事はこちら
※現在はこちらのページのURLのみ記載されています。
 Parsleyの導入 調べてみると、動的なvalidationをするためのjQueryプラグインっていっぱいあるのですが、今回は割と新しい情報が多いParsleyを使うことにしました。
ポイントとしては、日本語化したい場合は後で読み込むように調整することです。
僕の場合は、javascripts内にPackageとAppsという2つのFolderを切ってます。
こうすると、他のjQueryのPackageもまとめて後から調整用のAppsを読み込めるので便利です。
# app/assets/javascripts/application.js.coffee  #= 上は省略 #= require_directory ./packages ここにparsely.min.jsを入れます #= require_directory ./apps ここに調整用を入れます あと、jsをprecompileする設定もしておいてくださいね。
# config/initializers/assets.rb Rails.application.config.assets.precompile += %w(*.js) viewの設定は、公式ページを見ればだいたいできるので省略します。
 Bootstrap4の設定 さあ、ParsleyをBootstrap4に当てはめましょう。
// app/assets/stylesheets/parsely.scss  input { &amp;amp;.parsley-success { @extend .is-valid; } &amp;amp;.parsley-error { @extend .is-invalid; } } select { &amp;amp;.parsley-success { @extend .is-valid; } &amp;amp;.parsley-error { @extend .is-invalid; } } textarea { &amp;amp;.parsley-success { @extend .</description>
    </item>
    
    <item>
      <title>[Rails]controllerで作るflashメッセージの中にlink_toを入れる方法</title>
      <link>https://cpx.business/blog/how-to-put-link_to-in-flash-message-created-by-controller/</link>
      <pubDate>Fri, 28 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cpx.business/blog/how-to-put-link_to-in-flash-message-created-by-controller/</guid>
      <description>Railsで、flashにLinkを入れたい時に調べるのに苦労したのでまとめておきます。
 ※こちらの記事は、Qiitaにて公開していたものを2020/03/01にこちらに移行しています。
元記事はこちら
※現在はこちらのページのURLのみ記載されています。
 結論 # controllers/application_controller.rb if アラートを出したい条件 text = &amp;#34;#{view_context.link_to &amp;#39;こちら&amp;#39;, hoge_path}をクリックしてください&amp;#34;.html_safe flash[:hoge_alert] = text else flash[:hoge_alert] = nil end  ポイント  viewのヘルパーメソッドをcontroller内で使うときは view_context を使いましょう flashの消える条件をつけておきましょう。そうじゃないと画面更新時に html_safe がかかってない状態で表示されることがあります。  それに伴い、flashの名前には独自のものをつけておくことをお勧めします。他のアラートまで消えるのは嫌なので。     ダメな例(僕がダメだった例) 調べてると、よくこんな解決策が出てきます。
link_to() in Rails flashとか。
# controllers/application_controller.rb flash[:error] = render_to_string(:partial =&amp;gt; &amp;#34;shared/login_failed_message&amp;#34;) &amp;lt;%- shared/_login_failed_message.html.erb %&amp;gt; &amp;lt;%= &amp;quot;Login failed. If you have forgotten your password, you can #{link_to(&#39;reset it&#39;, reset_path)}&amp;quot; %&amp;gt; ただ、これだと他のrenderと重複した時に不思議な挙動になったので、やめておいたほうがいいかもです。</description>
    </item>
    
    <item>
      <title>[Rails]js-cookie.jsを使ってbootstrap4のタブの情報を保持する</title>
      <link>https://cpx.business/blog/how-to-retain-the-information-of-bootstrap4-tab-using-js-cookie/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cpx.business/blog/how-to-retain-the-information-of-bootstrap4-tab-using-js-cookie/</guid>
      <description>タブ内にフォームがある時、postするたびに更新でタブが初期値に戻ってしまうのをなんとかしたいと思っていろいろ調べた結果、Cookieに保持するのがいいとわかりました。
そこで、こちらのjs-cookie.jsを使ってみました。
 ※こちらの記事は、Qiitaにて公開していたものを2020/03/01にこちらに移行しています。
元記事はこちら
※現在はこちらのページのURLのみ記載されています。
 現状 # views/user/show.html.haml .container.mt-5 = user.name さん .row .col-12.py-2 %nav#user-tab.nav.nav-tabs.nav-fill{:role =&amp;gt; &amp;quot;tablist&amp;quot;} %a#user-tab-info.nav-item.nav-link.active{&amp;quot;aria-controls&amp;quot; =&amp;gt; &amp;quot;#user-info&amp;quot;, &amp;quot;data-toggle&amp;quot; =&amp;gt; &amp;quot;tab&amp;quot;, &amp;quot;aria-selected&amp;quot; =&amp;gt; &amp;quot;true&amp;quot;, :href =&amp;gt; &amp;quot;#user-info&amp;quot;, :role =&amp;gt; &amp;quot;tab&amp;quot;} User情報 %a#user-tab-posts.nav-item.nav-link{&amp;quot;aria-controls&amp;quot; =&amp;gt; &amp;quot;#user-posts&amp;quot;, &amp;quot;data-toggle&amp;quot; =&amp;gt; &amp;quot;tab&amp;quot;, &amp;quot;aria-selected&amp;quot; =&amp;gt; &amp;quot;false&amp;quot;, :href =&amp;gt; &amp;quot;#user-posts&amp;quot;, :role =&amp;gt; &amp;quot;tab&amp;quot;} 投稿 #user-tabContent.tab-content #user-info.tab-pane.fade.show.active{&amp;quot;aria-labelledby&amp;quot; =&amp;gt; &amp;quot;user-tab-info&amp;quot;, :role =&amp;gt; &amp;quot;tabpanel&amp;quot;} = render partial: &#39;users/info&#39;, locals:{user: user} # 大事じゃないので割愛 #user-posts.tab-pane.fade{&amp;quot;aria-labelledby&amp;quot; =&amp;gt; &amp;quot;user-tab-posts&amp;quot;, :role =&amp;gt; &amp;quot;tabpanel&amp;quot;} = render partial: &#39;users/post&#39;, collection: player.</description>
    </item>
    
    <item>
      <title>[Rails]検索情報を保持するcheck_box_tagの作り方</title>
      <link>https://cpx.business/blog/how-to-create-check_box_tag/</link>
      <pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cpx.business/blog/how-to-create-check_box_tag/</guid>
      <description>ransackで実装している検索で、チェックボックスに検索条件を保持させました。
 ※こちらの記事は、Qiitaにて公開していたものを2020/03/01にこちらに移行しています。
元記事はこちら
※現在はこちらのページのURLのみ記載されています。
 困りごと ransackの検索後の画面を見たときに検索条件がcheck_boxに保持されていないので、検索条件がわからない！
(URLを見ればわかるけど、ユーザーにそこまでのリテラシーがあるとも思えない…)
 前提条件 enumで値を扱っている # models/post.rb class Post &amp;lt; ApplicationRecord enum tag: { report: 0, interview: 1, info: 2} # 以下略 end  enum_helpで日本語化している # Gemfile gem &amp;#39;enum_help&amp;#39; # config/locales/ja.yml ja: enums: post: tag: report: 開催レポート interview: インタビュー info: お知らせ  ransackで検索を実装している # controllers/posts_controller.rb class PostsController &amp;lt; ApplicationController def index @search = Post.ransack(params[:q]) @result = @search.result end # 以下略 end / views/posts/index.html.haml = search_form_for @search do |f| /　以下略 = f.</description>
    </item>
    
    <item>
      <title>[Rails]横から出てくるナビバー、simple-sidebarを導入する</title>
      <link>https://cpx.business/blog/how-to-install-simple-sidebar/</link>
      <pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cpx.business/blog/how-to-install-simple-sidebar/</guid>
      <description>ナビバー以外にログインユーザーのみに表示するリンク一覧が欲しかったので、いろいろ探しているとこんなものを見つけ、早速導入してみました。
https://github.com/dcdeiv/simple-sidebar
デモ
 ※こちらの記事は、Qiitaにて公開していたものを2020/03/01にこちらに移行しています。
元記事はこちら
※現在はこちらのページのURLのみ記載されています。
 導入環境  Rails 5.0.7 jQuery turbolinks   導入方法 https://github.com/dcdeiv/simple-sidebar/releases
ここから、zipファイルかtar.gzファイルをダウンロードします。
展開して、distフォルダの中からどちらか好きな方をapp/assets/javascripts/の中に入れます。
(自分はRuby On Rails AssetPipelineで読み込まれるJSの順番指定についてにあるようにして読込む順番を操作しています。こちらのようにする場合、これはapp/assets/javascripts/packagesに入れてます。)
下記ファイルを同じくapp/assets/javascripts/の中に作成します。
(上記のように読込む順番を操作している場合、これをあとで読み込むようにしておきます。自分はapp/assets/javascripts/appsの中に入れてます。)
# simple-sidebar.js.coffee  $(document).on &amp;#39;turbolinks:load&amp;#39;, -&amp;gt; # 2018/08/15追記部分開始  $(&amp;#39;html&amp;#39;).css(&amp;#39;overflow&amp;#39;, &amp;#39;auto&amp;#39;) # 2018/08/15追記部分終了  $(&amp;#39;#sidebar&amp;#39;).simpleSidebar opener: &amp;#39;#button&amp;#39; wrapper: &amp;#39;#wrapper&amp;#39; sidebar: align: &amp;#39;left&amp;#39; width: 200; closingLinks: &amp;#39;.close-sidebar&amp;#39; あとはviewをこんな感じに変えるだけ。
(bootstrap4、devise、font-awesomeを使用してます。)
/ application.html.haml %body.font_change#wrapper - if user_signed_in? %nav.bg-dark.py-5#sidebar %ul.navbar-nav.mx-4 %li.nav-item.text-light.pt-3 = link_to user_path(current_user), class: &#39;nav-link text-light&#39; do = icon(&#39;far&#39;, &#39;user fa-fw&#39;)} マイページ %li.</description>
    </item>
    
    <item>
      <title>[Rails]render partial collectionでeach_with_indexができる話</title>
      <link>https://cpx.business/blog/how-to-each_with_index-in-render-partial-collection/</link>
      <pubDate>Thu, 02 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cpx.business/blog/how-to-each_with_index-in-render-partial-collection/</guid>
      <description>partial内でindexも使いたい場合はどうするのかなーと思い調べてみました。
 ※こちらの記事は、Qiitaにて公開していたものを2020/03/01にこちらに移行しています。
元記事はこちら
※現在はこちらのページのURLのみ記載されています。
 困りごと 調べ始めるきっかけはこの記事でした。
パーシャルをrenderする際のパフォーマンスに関する注意点
とりあえず、each内でrender partial: &#39;posts/post&#39;, locals: { post: post }みたいにそれぞれにlocalsで変数渡すぐらいならrender partial: &#39;posts/post&#39;, collection: @postsみたいにcollectionにしちゃおう！その方が高速だよ！という話でした。
この記事を読んで早速自分の書いたコードを直していたのですが、どうするんだろう…ってなったのがこの部分。
/ view.html.haml - post.comments.each_with_index do |comment, idx| = render partial: &#39;posts/partials/comment&#39;, locals: {comment: comment, idx: idx} このように、partial内でindexも使いたい場合はどうするのかなーと思い調べてみました。
 解決策 / view.html.haml = render partial: &#39;posts/partials/comment&#39;, collection: post.comments, as: :comment / posts/partials/_comment.html.haml - if comment_counter == 0 -# 一つ目の挙動 - else -# それ以外の挙動 このように、asで指定したcommentに_counterをつけると、indexの役割を果たしてくれそう。
Render partial with collection has &amp;ldquo;hidden&amp;rdquo; indexのコメントにありました。</description>
    </item>
    
    <item>
      <title>[Rails]enumの値を日本語化してラジオボタンに突っ込む</title>
      <link>https://cpx.business/blog/how-to-create-radio-button-using-enum/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cpx.business/blog/how-to-create-radio-button-using-enum/</guid>
      <description>enumの値ごとにラジオボタンを作るのがめんどくさいなと思っていろいろ調べた時の備忘録です。
 ※こちらの記事は、Qiitaにて公開していたものを2020/03/01にこちらに移行しています。
元記事はこちら
※現在はこちらのページのURLのみ記載されています。
 前提条件 こんなモデルがあったとして
# models/user.rb class User &amp;lt; ApplicationRecord enum area: {east: 0, west: 1} # (以下略) end enum_helpというgemを入れたとして
# Gemfile gem &amp;#39;enum_help&amp;#39; enumの値に対応した日本語をja.ymlに入れたとして
# ja.yml ja: enums: user: area: east: 関東 west: 関西 そこから、どうやってlabelに日本語、valueに英語が入ったのラジオボタンを作るかという話です。
 結論 こんな感じでできました！嬉しい！
# users/_form.haml = form_for(@user) do |f| = f.collection_radio_buttons :area, User.areas_i18n, :first, :last, include_hidden: false do |b| - content_tag(:div, class: &amp;quot;wrapper-class&amp;quot;) do - b.radio_button(class: &amp;quot;button-class&amp;quot;) + b.label(class: &amp;quot;label-class&amp;quot;) = f.</description>
    </item>
    
    <item>
      <title>[Rails]bootstrapを使っているサービスでCSSで画面の一部をスクロールさせる</title>
      <link>https://cpx.business/blog/how-to-scroll-part-of-the-screen-with-css/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cpx.business/blog/how-to-scroll-part-of-the-screen-with-css/</guid>
      <description>slackのように、画面の一部だけスクロールするようなcssの設定の仕方を調べる際に少し困ったので備忘録に。
bootstrapを使っている前提で話を進めます。
 ※こちらの記事は、Qiitaにて公開していたものを2020/03/02にこちらに移行しています。
元記事はこちら
※現在はこちらのページのURLのみ記載されています。
 基本 [CSS]画面内の一部だけをスクロールに書いてあるように、縦へのスクロールのみ可能にしたければ、基本はこの形で実装が可能です。
//sample.scss  .scroll { overflow-y: auto; } ただ、bootstrapを使っていると、おそらく分割の際にこのような形で実装していると思われるため、これだけでは動かないかと思います。
# sample.haml .row .col-3.scroll スクロールを分ける場所その1 .col-9.scroll スクロールを分ける場所その2 cssで画面内の一部だけスクロールさせるでは、
 ※なぜか親要素(スクロールさせるdiv要素のさらに親要素)にposition:absouteをしないと出来なかった。
 とありますが、position: absouteは設定したくない…と思い悩んでいましたが、これは高さがrowがheight: 100%になっているため、起きてしまっていました。
 heightの固定のオススメの方法 このようにするのがオススメです。
// sample.scss  .scroll { overflow-y: auto; } .height-fixed { height: 95vh; } # sample.haml .row.height-fixed .col-3.scroll スクロールを分ける場所その1 .col-9.scroll スクロールを分ける場所その2 画面サイズに合わせて高さを指定する3つの方法に詳しく載っていますが、rowの高さをheight: 95vh;に指定することで、画面の95%で固定をしてくれます。
直感的な指定方法で、画面に合わせて固定サイズも設定してくれるので、こちらが便利かと思います。
 参考にさせていただいたサイト  cssで画面内の一部だけスクロールさせる - Qiita 画面サイズに合わせて高さを指定する3つの方法   こちらもぜひご一緒に！  [Rails]動的なvalidationをParsleyと、Bootstrap4を使っておしゃれに実装する [Rails]js-cookie.jsを使ってbootstrap4のタブの情報を保持する  </description>
    </item>
    
    <item>
      <title>[Rails]ransackで1画面で複数モデルの検索を実装する</title>
      <link>https://cpx.business/blog/how-to-use-ransack-in-many-models/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cpx.business/blog/how-to-use-ransack-in-many-models/</guid>
      <description>日本語で書かれている記事が見つからなかったので。
 ※こちらの記事は、Qiitaにて公開していたものを2020/03/01にこちらに移行しています。
元記事はこちら
※現在はこちらのページのURLのみ記載されています。
 困りごと 複数のモデルに対して1画面で別々に検索したい時に、以下のようにしてしまうとどちらも同じパラメータで検索してしまうため、検索後片方が検索結果から消えてしまう…ということが起こりました。
その時のコードはこんな感じ
# index.haml .row .col-6 = search_form_for @model1_search do |f| = f.search_field :column1_cont = f.submit &amp;quot;検索&amp;quot; - @model1s.each do |model1| model1.name .col-6 = search_form_for @model2_search do |f| = f.search_field :column2_cont = f.submit &amp;quot;検索&amp;quot; - @model2s.each do |model2| model2.name # controller.rb def index @model1_search = Model1.ransack(params[:q]) @model1s = @model1_search.result @model2_search = Model2.ransack(params[:q]) @model2s = @model2_search.result end  解決策 ransackのWikiにちゃんとやり方が載ってました。
こんな感じでパラメータを:q以外にも設定してあげればいいみたいですね。
# index.haml .row .</description>
    </item>
    
    <item>
      <title>[Rails]paramsにform以外の値を入れたい！と思ってるあなたへ</title>
      <link>https://cpx.business/blog/how-to-put-a-value-other-than-form-in-params/</link>
      <pubDate>Sun, 04 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cpx.business/blog/how-to-put-a-value-other-than-form-in-params/</guid>
      <description>先日、大学の課題でこんなものを作ってみました。
簡単な旅行予約サイトのイメージです。
その中で、少し困ったことがあったのでメモしておきます。
 ※こちらの記事は、Qiitaにて公開していたものを2020/03/01にこちらに移行しています。
元記事はこちら
※現在はこちらのページのURLのみ記載されています。
 やりたかったこと 予約コードを自動生成したかった。
ログイン後に、旅行の詳細ページに飛ぶと登場する「予約する」ボタンを押すと、一意な予約コードを自動生成する必要があり、悩みました。
この予約コードを自動生成するために、最初送られてきたparamsからごちゃごちゃしようと思ってたのですが、どうにも難しそうでした。
modelで何か触るんだろうなーと思って調べたのですが、いい方法が見つからず…
 結果 このように、hidden_fieldでなんとかするようにしました。
app/views/tours/show.html.erb &amp;lt;%= simple_form_for([@tour, @booking]) do |f| %&amp;gt; &amp;lt;%= f.hidden_field :customer_id, :value =&amp;gt; current_customer.id %&amp;gt; &amp;lt;%= f.hidden_field :tour_id, :value =&amp;gt; @tour.id %&amp;gt; &amp;lt;%# これが予約コード %&amp;gt; &amp;lt;%= f.hidden_field :booking_code, :value =&amp;gt; &amp;quot;#{current_customer.id}-#{@tour.id}-#{Time.new.strftime(&amp;quot;%Y%m%d-%H%M%S&amp;quot;)}&amp;quot; %&amp;gt; &amp;lt;%= f.submit &#39;予約する&#39;, class: &#39;btn btn-primary&#39; %&amp;gt; &amp;lt;% end %&amp;gt; このように、予約コードも無理やりviewの中で作らせました。
一意なものにするために、customer_idとtour_idと現在時刻をハイフンで繋げたものにしています。
値を加工して作らなくても、加工した値をparamsとして渡してあげたほうが楽だなーと。
viewで加工するのはよくないとは思うのですが、簡単なものならこれでも良さそうだと思います。
もしよければgithubにも公開しているので触ってみてください。</description>
    </item>
    
    <item>
      <title>[Rails]Bootstrapでレスポンシブな『吹き出し』を作る方法</title>
      <link>https://cpx.business/blog/make-responsive-speech-bubbles-with-bootstrap/</link>
      <pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cpx.business/blog/make-responsive-speech-bubbles-with-bootstrap/</guid>
      <description>2018/03/25追記：
こちら、Bootstrap3の話です。
Bootstrap4では、.row-centerなど実装されたようなので、もっと簡単に作成できますね。
詳しくはBootstrap4移行ガイドをみてください。
 ※こちらの記事は、Qiitaにて公開していたものを2020/03/01にこちらに移行しています。
元記事はこちら
※現在はこちらのページのURLのみ記載されています。
 Bootstrapを導入しているRailsアプリでできるだけ簡単に人が話しているような吹き出しを作る方法を模索したのでまとめてみました。
 はじめに完成系を このように、人が話しているような吹き出しを作る方法を紹介します。
画面を小さくしても、ちゃんとレスポンシブに変化してくれます。
ソースコードはこんな感じになっています。
&amp;lt;!-- sample.html.erb --&amp;gt; &amp;lt;div class=&amp;quot;row row-center&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;col-lg-2 col-md-3 col-sm-4 col-xs-5&amp;quot;&amp;gt; &amp;lt;%= image_tag &amp;quot;/images/woman.png&amp;quot;, alt: &amp;quot;東京藝術大学 Mさん&amp;quot;, class:&amp;quot;img-responsive img-circle reviews&amp;quot; %&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;col-lg-10 col-md-9 col-sm-8 col-xs-7&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;popover right show&amp;quot;style=&amp;quot;position:relative; top=-90px; left=100px; max-width:100%; display:inline;&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;arrow&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;h3 class=&amp;quot;popover-title&amp;quot;&amp;gt;東京藝術大学 Mさん&amp;lt;/h3&amp;gt; &amp;lt;div class=&amp;quot;popover-content&amp;quot;&amp;gt; &amp;lt;p&amp;gt;兵庫県神戸市出身。4歳よりピアノ、12歳よりフルートを始める。&amp;lt;br&amp;gt;東京藝術大学　音楽学部器楽科フルート専攻在学中。&amp;lt;br&amp;gt;第67回全日本学生音楽コンクール大阪大会入選。第9回神戸新人音楽賞コンクール優秀賞受賞。&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; // sample.scss  // 吹き出し用の設定 .popover.show{ margin-bottom: 10px; } // 横の画像用の設定 img.</description>
    </item>
    
  </channel>
</rss>