<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on CPX</title>
    <link>https://cpx.business/tags/javascript/</link>
    <description>Recent content in JavaScript on CPX</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 13 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://cpx.business/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Rails]js-cookie.jsを使ってbootstrap4のタブの情報を保持する</title>
      <link>https://cpx.business/blog/how-to-retain-the-information-of-bootstrap4-tab-using-js-cookie/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cpx.business/blog/how-to-retain-the-information-of-bootstrap4-tab-using-js-cookie/</guid>
      <description>タブ内にフォームがある時、postするたびに更新でタブが初期値に戻ってしまうのをなんとかしたいと思っていろいろ調べた結果、Cookieに保持するのがいいとわかりました。
そこで、こちらのjs-cookie.jsを使ってみました。
 ※こちらの記事は、Qiitaにて公開していたものを2020/03/01にこちらに移行しています。
元記事はこちら
※現在はこちらのページのURLのみ記載されています。
 現状 # views/user/show.html.haml .container.mt-5 = user.name さん .row .col-12.py-2 %nav#user-tab.nav.nav-tabs.nav-fill{:role =&amp;gt; &amp;quot;tablist&amp;quot;} %a#user-tab-info.nav-item.nav-link.active{&amp;quot;aria-controls&amp;quot; =&amp;gt; &amp;quot;#user-info&amp;quot;, &amp;quot;data-toggle&amp;quot; =&amp;gt; &amp;quot;tab&amp;quot;, &amp;quot;aria-selected&amp;quot; =&amp;gt; &amp;quot;true&amp;quot;, :href =&amp;gt; &amp;quot;#user-info&amp;quot;, :role =&amp;gt; &amp;quot;tab&amp;quot;} User情報 %a#user-tab-posts.nav-item.nav-link{&amp;quot;aria-controls&amp;quot; =&amp;gt; &amp;quot;#user-posts&amp;quot;, &amp;quot;data-toggle&amp;quot; =&amp;gt; &amp;quot;tab&amp;quot;, &amp;quot;aria-selected&amp;quot; =&amp;gt; &amp;quot;false&amp;quot;, :href =&amp;gt; &amp;quot;#user-posts&amp;quot;, :role =&amp;gt; &amp;quot;tab&amp;quot;} 投稿 #user-tabContent.tab-content #user-info.tab-pane.fade.show.active{&amp;quot;aria-labelledby&amp;quot; =&amp;gt; &amp;quot;user-tab-info&amp;quot;, :role =&amp;gt; &amp;quot;tabpanel&amp;quot;} = render partial: &#39;users/info&#39;, locals:{user: user} # 大事じゃないので割愛 #user-posts.tab-pane.fade{&amp;quot;aria-labelledby&amp;quot; =&amp;gt; &amp;quot;user-tab-posts&amp;quot;, :role =&amp;gt; &amp;quot;tabpanel&amp;quot;} = render partial: &#39;users/post&#39;, collection: player.</description>
    </item>
    
    <item>
      <title>[Rails]横から出てくるナビバー、simple-sidebarを導入する</title>
      <link>https://cpx.business/blog/how-to-install-simple-sidebar/</link>
      <pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cpx.business/blog/how-to-install-simple-sidebar/</guid>
      <description>ナビバー以外にログインユーザーのみに表示するリンク一覧が欲しかったので、いろいろ探しているとこんなものを見つけ、さっそく導入してみました。
https://github.com/dcdeiv/simple-sidebar
デモ
 ※こちらの記事は、Qiitaにて公開していたものを2020/03/01にこちらに移行しています。
元記事はこちら
※現在はこちらのページのURLのみ記載されています。
 導入環境  Rails 5.0.7 jQuery turbolinks   導入方法 https://github.com/dcdeiv/simple-sidebar/releases
ここから、zipファイルかtar.gzファイルをダウンロードします。
展開して、distフォルダの中からどちらか好きな方をapp/assets/javascripts/の中に入れます。
(自分はRuby On Rails AssetPipelineで読み込まれるJSの順番指定についてにあるようにして読込む順番を操作しています。こちらのようにする場合、これはapp/assets/javascripts/packagesに入れてます。)
下記ファイルを同じくapp/assets/javascripts/の中に作成します。
(上記のように読込む順番を操作している場合、これをあとで読み込むようにしておきます。自分はapp/assets/javascripts/appsの中に入れてます。)
# simple-sidebar.js.coffee  $(document).on &amp;#39;turbolinks:load&amp;#39;, -&amp;gt; # 2018/08/15追記部分開始  $(&amp;#39;html&amp;#39;).css(&amp;#39;overflow&amp;#39;, &amp;#39;auto&amp;#39;) # 2018/08/15追記部分終了  $(&amp;#39;#sidebar&amp;#39;).simpleSidebar opener: &amp;#39;#button&amp;#39; wrapper: &amp;#39;#wrapper&amp;#39; sidebar: align: &amp;#39;left&amp;#39; width: 200; closingLinks: &amp;#39;.close-sidebar&amp;#39; あとはviewをこんな感じに変えるだけ。
(bootstrap4、devise、font-awesomeを使用してます。)
/ application.html.haml %body.font_change#wrapper - if user_signed_in? %nav.bg-dark.py-5#sidebar %ul.navbar-nav.mx-4 %li.nav-item.text-light.pt-3 = link_to user_path(current_user), class: &#39;nav-link text-light&#39; do = icon(&#39;far&#39;, &#39;user fa-fw&#39;)} マイページ %li.</description>
    </item>
    
    <item>
      <title>[Rails]ブログ機能を実装して、Herokuにuploadするまで</title>
      <link>https://cpx.business/blog/how-to-create-blog-in-rails/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cpx.business/blog/how-to-create-blog-in-rails/</guid>
      <description>SEO用にブログをwebサービスと同じドメイン内で運用したいと思い、いろいろ調べて実装してみたので、その様子を公開します。
実装したかったのは、以下の機能。
 文章をuploadできること 簡単に文字サイズ等も調整できること 文中に画像も挿入できること   ※こちらの記事は、Qiitaにて公開していたものを2020/03/02にこちらに移行しています。
元記事はこちら
※現在はこちらのページのURLのみ記載されています。
 それこそ、Qiitaの記事投稿画面がイメージでした。
「Rails ブログ」とかで調べてもなかなか出てこないですよね。誰がrailsについて書いているブログを検索するんだとイライラしました。
いろいろ調べるうちに、「エディタ」なるものを実装するのに近いことがわかってきました。
その中でも、今回は「Squire」を導入してみることに。
採用理由としては、使用しているのがRails5.0なので、gemとかあまり使いたくないな…(どうせうまくいかないんだろうな)というのと、こちらの記事(ruby on railsに最強のwysiwygエディタ、Squireを導入する)がいい感じにわかりやすかったことです。
 DBを作成する これはもうやっちゃってください。
ポイントとしては、textデータを入れ込みたい時にt.textにしておいたほうが無難っぽいことぐらいですかね。
詳しくはこちら(Railsのmodelで長い文字列を扱う時はstringではなくtextを使おう)にわかりやすく書かれていました。
もう大丈夫らしいですけどね。
私は今回「お知らせ」みたいなものを作るイメージだったので、noticeというDBを作りました。
# migrate/20180312121837_create_notices.rb def change create_table :notices do |t| t.string :title t.integer :tag #enumを使うので t.text :text #ここがt.stringじゃないほうが無難みたい。 t.timestamps end end  モデルを作成する 次にモデルを作成します。
ここは何の特徴もなく、ただただ作成してもらえれば結構です。
# models/notice.rb class Notice &amp;lt; ApplicationRecord enum tag: { report: 1, event: 2, interview: 3, info: 4} ALLOWED_PARAMS = [:id, :title, :tag, :text] validates :title, presence: true validates :tag, presence: true validates :text, presence: true end tagにはenumを使ってます。</description>
    </item>
    
  </channel>
</rss>